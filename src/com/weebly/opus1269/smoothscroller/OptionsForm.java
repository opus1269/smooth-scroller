/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Michael A Updike
 * Copyright (c) 2013 Hugo Campos
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.weebly.opus1269.smoothscroller;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;

import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * GUI for the SmoothScroller options
 */
public class OptionsForm implements ActionListener {
    private JSlider thresholdSlider;
    private JSlider speedLmtSlider;
    private JSlider accLmtSlider;
    private JSlider fricSlider;
    private JSlider multSlider;
    private JPanel panel;
    private JPanel itemPanel;
    private JButton resetDefaultsButton;

    private final ArrayList<JSlider> mList = new ArrayList<JSlider>();

    public OptionsForm() {
        mList.add(thresholdSlider);
        mList.add(speedLmtSlider);
        mList.add(accLmtSlider);
        mList.add(fricSlider);
        mList.add(multSlider);

        resetDefaultsButton.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Props.resetDefaults();
        setFromProps();
    }

    public JComponent getRoot() {
        return panel;
    }

    public void setToProps() {
        int i = 0;
        for (JSlider slider : mList) {
            getProp(i).setPos(slider.getValue());
            i++;
        }
    }

    public boolean isModified() {
        int i = 0;
        for (JSlider slider : mList) {
            if (slider.getValue() != getProp(i).POS) {
                return true;
            }
            i++;
        }
        return false;
    }

    public void setFromProps() {
        int i = 0;
        for (JSlider slider : mList) {
            slider.setValue(Props.get(i).POS);
            i++;
        }
    }

    private Prop getProp(int pos) {
        return Props.get(pos);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        itemPanel = new JPanel();
        itemPanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(itemPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
                                                        GridConstraints.FILL_NONE,
                                                        GridConstraints.SIZEPOLICY_CAN_SHRINK |
                                                                GridConstraints
                                                                        .SIZEPOLICY_CAN_GROW,
                                                        GridConstraints.SIZEPOLICY_CAN_SHRINK |
                                                                GridConstraints
                                                                        .SIZEPOLICY_CAN_GROW,
                                                        null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Movement Threshold");
        label1.setToolTipText("Threshold below which the scrollbar is stopped");
        itemPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                                                         GridConstraints.FILL_NONE,
                                                         GridConstraints.SIZEPOLICY_FIXED,
                                                         GridConstraints.SIZEPOLICY_FIXED, null,
                                                         null, null, 0, false));
        fricSlider = new JSlider();
        fricSlider.setMajorTickSpacing(0);
        fricSlider.setMaximum(100);
        fricSlider.setMinimum(0);
        fricSlider.setPaintLabels(true);
        fricSlider.setToolTipText("");
        fricSlider.setValue(50);
        itemPanel.add(fricSlider, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST,
                                                             GridConstraints.FILL_HORIZONTAL,
                                                             GridConstraints.SIZEPOLICY_FIXED,
                                                             GridConstraints.SIZEPOLICY_FIXED,
                                                             null, null, null, 0, false));
        multSlider = new JSlider();
        multSlider.setInverted(false);
        multSlider.setMajorTickSpacing(20);
        multSlider.setMaximum(100);
        multSlider.setMinimum(1);
        multSlider.setMinorTickSpacing(5);
        multSlider.setPaintLabels(false);
        multSlider.setPaintTicks(true);
        multSlider.setPaintTrack(true);
        multSlider.setSnapToTicks(true);
        multSlider.setToolTipText("");
        multSlider.setValue(11);
        itemPanel.add(multSlider, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST,
                                                             GridConstraints.FILL_HORIZONTAL,
                                                             GridConstraints.SIZEPOLICY_FIXED,
                                                             GridConstraints.SIZEPOLICY_FIXED,
                                                             null, null, null, 0, false));
        accLmtSlider = new JSlider();
        accLmtSlider.setPaintLabels(false);
        accLmtSlider.setPaintTicks(false);
        itemPanel.add(accLmtSlider, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST,
                                                               GridConstraints.FILL_HORIZONTAL,
                                                               GridConstraints.SIZEPOLICY_FIXED,
                                                               GridConstraints.SIZEPOLICY_FIXED,
                                                               null, null, null, 0, false));
        thresholdSlider = new JSlider();
        thresholdSlider.setMajorTickSpacing(0);
        thresholdSlider.setMinimum(0);
        thresholdSlider.setPaintLabels(false);
        thresholdSlider.setToolTipText("");
        itemPanel.add(thresholdSlider, new GridConstraints(0, 1, 1, 1, GridConstraints
                                                                               .ANCHOR_WEST,
                                                                  GridConstraints
                                                                          .FILL_HORIZONTAL,
                                                                  GridConstraints
                                                                          .SIZEPOLICY_FIXED,
                                                                  GridConstraints
                                                                          .SIZEPOLICY_FIXED,
                                                                  null, null, null, 0, false));
        speedLmtSlider = new JSlider();
        speedLmtSlider.setInverted(false);
        speedLmtSlider.setMajorTickSpacing(0);
        speedLmtSlider.setMinimum(0);
        speedLmtSlider.setPaintLabels(true);
        speedLmtSlider.setToolTipText("");
        speedLmtSlider.setValueIsAdjusting(false);
        speedLmtSlider.setVisible(true);
        itemPanel.add(speedLmtSlider, new GridConstraints(1, 1, 1, 1, GridConstraints
                                                                              .ANCHOR_WEST,
                                                                 GridConstraints.FILL_HORIZONTAL,
                                                                 GridConstraints
                                                                         .SIZEPOLICY_FIXED,
                                                                 GridConstraints
                                                                         .SIZEPOLICY_FIXED, null,
                                                                 null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Speed Limit");
        label2.setToolTipText("Maximum scrolling speed");
        label2.setVisible(true);
        itemPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                                                         GridConstraints.FILL_NONE,
                                                         GridConstraints.SIZEPOLICY_FIXED,
                                                         GridConstraints.SIZEPOLICY_FIXED, null,
                                                         null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Acceleration Limit");
        label3.setToolTipText("Maximum scrolling acceleration");
        itemPanel.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                                                         GridConstraints.FILL_NONE,
                                                         GridConstraints.SIZEPOLICY_FIXED,
                                                         GridConstraints.SIZEPOLICY_FIXED, null,
                                                         null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Friction Factor");
        label4.setToolTipText("Speed reduction factor during kinetic scrolling");
        itemPanel.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                                                         GridConstraints.FILL_NONE,
                                                         GridConstraints.SIZEPOLICY_FIXED,
                                                         GridConstraints.SIZEPOLICY_FIXED, null,
                                                         null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Scroll Multiplier");
        label5.setToolTipText("Multiplier for scroll movement");
        itemPanel.add(label5, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                                                         GridConstraints.FILL_NONE,
                                                         GridConstraints.SIZEPOLICY_FIXED,
                                                         GridConstraints.SIZEPOLICY_FIXED, null,
                                                         null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
                                                     GridConstraints.FILL_BOTH, GridConstraints
                                                                                        .SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        resetDefaultsButton = new JButton();
        resetDefaultsButton.setText("Reset Defaults");
        resetDefaultsButton.setToolTipText("Set all items to their default values");
        panel1.add(resetDefaultsButton, new GridConstraints(0, 0, 1, 1, GridConstraints
                                                                                .ANCHOR_CENTER,
                                                                   GridConstraints.FILL_NONE,
                                                                   GridConstraints
                                                                           .SIZEPOLICY_CAN_SHRINK
                                                                           | GridConstraints
                                                                                     .SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
